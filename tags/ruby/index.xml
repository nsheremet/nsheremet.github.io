<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Nazarii Sheremet</title>
    <link>https://sheremet.pw/tags/ruby/</link>
    <description>Recent content in Ruby on Nazarii Sheremet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 18 Jul 2017 13:11:29 +0300</lastBuildDate>
    
	<atom:link href="https://sheremet.pw/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hanami Api Documentation [had]</title>
      <link>https://sheremet.pw/blog/had-gem/</link>
      <pubDate>Tue, 18 Jul 2017 13:11:29 +0300</pubDate>
      
      <guid>https://sheremet.pw/blog/had-gem/</guid>
      <description>Hi guys. A couple of days ago, I was searching a library, that will generate API documentation from RSpec specs. But I had one big problem, it&amp;rsquo;s Hanami Framework. We use Hanami for a couple of projects. Because they have good structure, they haven&amp;rsquo;t ActionSupport and many other pros. The result is I couldn&amp;rsquo;t find any library for Hanami, only for Rails/Sinatra.
So. My first step was to find a good and simple library, that already has basic modules for creating HTML pages with documentations or create docs in JSON/pdf files.</description>
    </item>
    
    <item>
      <title>How my post got into Ruby Weekly 343</title>
      <link>https://sheremet.pw/blog/ruby-weekly/</link>
      <pubDate>Mon, 10 Apr 2017 14:25:24 +0300</pubDate>
      
      <guid>https://sheremet.pw/blog/ruby-weekly/</guid>
      <description>Hi guys. A few days ago I wrote post about my problem with http-client mgems in mruby. There I described the work with my library mruby-smallhttp. And this post got into Ruby Weekly 343, here is the link. I dont know how they found my post, but I need to say thanks to Ruby Weekly team.
The Ruby Weekly is &amp;ldquo;A free, onceâ€“weekly e-mail round-up of Ruby news and articles.</description>
    </item>
    
    <item>
      <title>How I wrote the http-client for MRuby</title>
      <link>https://sheremet.pw/blog/mruby-smallhttp/</link>
      <pubDate>Tue, 04 Apr 2017 14:25:24 +0300</pubDate>
      
      <guid>https://sheremet.pw/blog/mruby-smallhttp/</guid>
      <description>Hi guys. While I was working on the library for Telegram API. I ran into the problem of finding a good http-client library. Some libraries did not allow multipart/form-data requests. And in others it was necessary to form the body itself. I thought that this is a problem that I can solve. I wrote a library, which is a small http-client (less than 200 lines of code). There are still small problems in it.</description>
    </item>
    
    <item>
      <title>New update in Faat!</title>
      <link>https://sheremet.pw/blog/removed-resource/</link>
      <pubDate>Thu, 18 Feb 2016 14:33:44 +0300</pubDate>
      
      <guid>https://sheremet.pw/blog/removed-resource/</guid>
      <description>Hi, guys! I decided to remove the ability to create resources. Because for ethical reasons it is better to use the concept of services. Since it is more suitable for the removal of business logic in services. Also the concept of services for wider use. And also since the implementation of resources and services was the same, it would be correct to leave only services.
Link on Faat!-v0.1.6
Updated usage Run rails generate faat:services {service_name}, generator will create folder services in app directory, and file {service_name}_service.</description>
    </item>
    
    <item>
      <title>How to use services in Rails with Faat!</title>
      <link>https://sheremet.pw/blog/faat-update/</link>
      <pubDate>Tue, 26 Jan 2016 14:36:32 +0300</pubDate>
      
      <guid>https://sheremet.pw/blog/faat-update/</guid>
      <description>Faat! v0.1.5 As I wrote earlier, I am developing a gem-generator for the separation of the base rails logic to resources, services and forms. Today I released a new version of my gem Faat!-v0.1.5. And added the module services to separate the logic of your rails projects.
Now, you will see examples of working with service.
Example: Ok, we just generated new payment_service.rb:
class PaymentService &amp;lt; Faat::Services::Base def year_payment # .</description>
    </item>
    
    <item>
      <title>This is my FAAT!</title>
      <link>https://sheremet.pw/blog/faat-gem/</link>
      <pubDate>Wed, 18 Nov 2015 14:42:26 +0300</pubDate>
      
      <guid>https://sheremet.pw/blog/faat-gem/</guid>
      <description>I want to introduce you with my first open-source project. It&amp;rsquo;s Faat! Gem that will kill your fat model.
Link at my gem on RubyGems and GitHub
Installation Add this line to your application&amp;rsquo;s Gemfile:
gem &#39;faat&#39;  And then execute:
$ bundle  Or install it yourself as:
$ gem install faat  Usage Run rails generate faat:resources {model_name}, generator will create folder resource in app directory, and file {model_name}_resource.</description>
    </item>
    
  </channel>
</rss>